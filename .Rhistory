# counting characters
stimuli.experiment.filtered$n.char <- nchar(as.character(stimuli.experiment.filtered$stimuli))
#
stimuli.objects.filtered <- filter(stimuli.experiment.filtered, category=="objects")
stimuli.food.filtered <- filter(stimuli.experiment.filtered, category=="food")
kruskal.food <- kruskal.test(stimuli.objects.filtered$corpes_norm_spain, stimuli.objects.filtered$condition)
kruskal.nfood <- kruskal.test(stimuli.objects.filtered$n.char, stimuli.objects.filtered$condition)
kruskal.objects <- kruskal.test(stimuli.objects.filtered$corpes_norm_spain, stimuli.objects.filtered$condition)
kruskal.nobjects <- kruskal.test(stimuli.objects.filtered$n.char, stimuli.objects.filtered$condition)
stimuli.experiment.filtered$sem.cat <- as.factor(stimuli.experiment.filtered$category)
#wilcox.test(codistrpes_norm_spain~sem.cat, data= stimuli.experiment.filtered)
###########
boxplot(stimuli.food.filtered$corpes_norm_spain,stimuli.objects.filtered$corpes_norm_spain, xlab="semantic category", ylab="word frecuency (corpes)", names=c("food","objects"))
#### ---- making plots with statistics
## Food vs objects
#- frecuency
stat.freq.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(corpes_norm_spain ~ category, paired = F, exact = T) %>%
add_significance()
boxplot1 <- ggpaired(stimuli.experiment.filtered,x="category",y="corpes_norm_spain", palette = get_palette(c("#ffffff", "#ffffff"), 2),
point.size = .5, line.size = 0.2,line.color = "#b4a7b7",linetype = "dashed",
ylab= "Frequency (corpes)",xlab="Semantic Category")
stat.freq.foodObjects <-  stat.freq.foodObjects %>% add_xy_position(x = "group")
boxplot1 <- boxplot1+stat_pvalue_manual(stat.freq.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.foodObjects, detailed= FALSE))
#-letters
stat.lett.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(n.char ~ category, paired = F, exact = T) %>%
add_significance()
boxplot2 <- ggpaired(stimuli.experiment.filtered,x="category",y="n.char", palette = get_palette(c("#ffffff", "#ffffff"), 2),
point.size = .5, line.size = 0.2,line.color = "#b4a7b7",linetype = "dashed",
ylab= "lenght (letters)",xlab="Semantic Category")
stat.lett.foodObjects <-  stat.lett.foodObjects %>% add_xy_position(x = "group")
boxplot2 <- boxplot2+stat_pvalue_manual(stat.lett.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.lett.foodObjects, detailed= FALSE))
#### ---- making plots with statistics
## Food vs objects
#- frecuency
stat.freq.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(corpes_norm_spain ~ category, paired = F, exact = T) %>%
add_significance()
boxplot1 <- ggpaired(stimuli.experiment.filtered,x="category",y="corpes_norm_spain", palette = get_palette(c("#ffffff", "#ffffff"), 2),
point.size = .5, line.size = 0.2,line.color = "#b4a7b7",linetype = "dashed",
ylab= "Frequency (corpes)",xlab="Semantic Category")
stat.freq.foodObjects <-  stat.freq.foodObjects %>% add_xy_position(x = "group")
boxplot1 <- boxplot1+stat_pvalue_manual(stat.freq.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.foodObjects, detailed= FALSE))
#-letters
stat.lett.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(n.char ~ category, paired = F, exact = T) %>%
add_significance()
boxplot2 <- ggpaired(stimuli.experiment.filtered,x="category",y="n.char", palette = get_palette(c("#ffffff", "#ffffff"), 2),
point.size = .5, line.size = 0.2,line.color = "#b4a7b7",linetype = "dashed",
ylab= "lenght (letters)",xlab="Semantic Category")
stat.lett.foodObjects <-  stat.lett.foodObjects %>% add_xy_position(x = "group")
boxplot2 <- boxplot2+stat_pvalue_manual(stat.lett.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.lett.foodObjects, detailed= FALSE))
boxplot1
#### ---- making plots with statistics
## Food vs objects
#- frecuency
stat.freq.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(corpes_norm_spain ~ category, paired = F, exact = T) %>%
add_significance()
boxplot1 <- ggpaired(stimuli.experiment.filtered,x="category",y="corpes_norm_spain", palette = get_palette(c("#ffffff", "#ffffff"), 2),
ylab= "Frequency (corpes)",xlab="Semantic Category")
stat.freq.foodObjects <-  stat.freq.foodObjects %>% add_xy_position(x = "group")
boxplot1 <- boxplot1+stat_pvalue_manual(stat.freq.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.foodObjects, detailed= FALSE))
#-letters
stat.lett.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(n.char ~ category, paired = F, exact = T) %>%
add_significance()
boxplot2 <- ggpaired(stimuli.experiment.filtered,x="category",y="n.char", palette = get_palette(c("#ffffff", "#ffffff"), 2),
ylab= "lenght (letters)",xlab="Semantic Category")
stat.lett.foodObjects <-  stat.lett.foodObjects %>% add_xy_position(x = "group")
boxplot2 <- boxplot2+stat_pvalue_manual(stat.lett.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.lett.foodObjects, detailed= FALSE))
boxplot2
boxplot1 <- ggpaired(stimuli.experiment.filtered,x="category",y="corpes_norm_spain", palette = get_palette(c("#ffffff", "#ffffff"), 2),
ylab= "Frequency (corpes)",xlab="Semantic Category")
boxplot1
#-letters
stat.lett.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(n.char ~ category, paired = F, exact = T) %>%
add_significance()
boxplot2 <- ggboxplot(stimuli.experiment.filtered,x="category",y="n.char", palette = get_palette(c("#ffffff", "#ffffff"), 2),
ylab= "lenght (letters)",xlab="Semantic Category")
stat.lett.foodObjects <-  stat.lett.foodObjects %>% add_xy_position(x = "group")
boxplot2 <- boxplot2+stat_pvalue_manual(stat.lett.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.lett.foodObjects, detailed= FALSE))
boxplot2
#### ---- making plots with statistics
## Food vs objects
#- frecuency
stat.freq.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(corpes_norm_spain ~ category, paired = F, exact = T) %>%
add_significance()
boxplot1 <- ggboxplot(stimuli.experiment.filtered,x="category",y="corpes_norm_spain", palette = get_palette(c("#ffffff", "#ffffff"), 2),
ylab= "Frequency (corpes)",xlab="Semantic Category")
stat.freq.foodObjects <-  stat.freq.foodObjects %>% add_xy_position(x = "group")
boxplot1 <- boxplot1+stat_pvalue_manual(stat.freq.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.foodObjects, detailed= FALSE))
#-letters
stat.lett.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(n.char ~ category, paired = F, exact = T) %>%
add_significance()
boxplot2 <- ggboxplot(stimuli.experiment.filtered,x="category",y="n.char", palette = get_palette(c("#ffffff", "#ffffff"), 2),
ylab= "lenght (letters)",xlab="Semantic Category")
stat.lett.foodObjects <-  stat.lett.foodObjects %>% add_xy_position(x = "group")
boxplot2 <- boxplot2+stat_pvalue_manual(stat.lett.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.lett.foodObjects, detailed= FALSE))
boxplot2
boxplot1
boxplot2
#### ---- making plots with statistics
## Food vs objects
#- frecuency
stat.freq.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(corpes_norm_spain ~ category, paired = F, exact = T) %>%
add_significance()
boxplot1 <- ggboxplot(stimuli.experiment.filtered,x="category",y="corpes_norm_spain", palette = get_palette(c("#ffffff", "#ffffff"), 2),
ylab= "Frequency (corpes)",xlab="Semantic Category")
stat.freq.foodObjects <-  stat.freq.foodObjects %>% add_xy_position(x = "group")
boxplot1 <- boxplot1+stat_pvalue_manual(stat.freq.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.foodObjects, detailed= T))
#-letters
stat.lett.foodObjects <-  stimuli.experiment.filtered %>%
wilcox_test(n.char ~ category, paired = F, exact = T) %>%
add_significance()
boxplot2 <- ggboxplot(stimuli.experiment.filtered,x="category",y="n.char", palette = get_palette(c("#ffffff", "#ffffff"), 2),
ylab= "lenght (letters)",xlab="Semantic Category")
stat.lett.foodObjects <-  stat.lett.foodObjects %>% add_xy_position(x = "group")
boxplot2 <- boxplot2+stat_pvalue_manual(stat.lett.foodObjects, tip.length = 0) +
labs(subtitle = get_test_label(stat.lett.foodObjects, detailed= T))
boxplot2
boxplot1
View(stimuli.experiment.filtered)
#### ---- making plots with statistics
## Mode of articulation
#- frecuency
stat.freq.mode <-  stimuli.experiment.filtered %>%
wilcox_test(corpes_norm_spain ~ condition, paired = F, exact = T) %>%
add_significance()
boxplot3 <- ggboxplot(stimuli.experiment.filtered,x="condition",y="corpes_norm_spain", palette = get_palette(c("#ffffff", "#ffffff"), 2),
ylab= "Frequency (corpes)",xlab="Mode of articulation")
stat.freq.mode <-  stat.freq.mode %>% add_xy_position(x = "group")
boxplot3 <- boxplot2+stat_pvalue_manual(stat.freq.mode, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.mode, detailed= T))
boxplot3
boxplot3 <- boxplot3+stat_pvalue_manual(stat.freq.mode, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.mode, detailed= T))
boxplot3
#### ---- making plots with statistics
## Mode of articulation
#- frecuency
stat.freq.mode <-  stimuli.experiment.filtered %>%
kruskal_test(corpes_norm_spain ~ condition, paired = F, exact = T) %>%
add_significance()
#### ---- making plots with statistics
## Mode of articulation
#- frecuency
stat.freq.mode <-  stimuli.experiment.filtered %>%
kruskal_test(corpes_norm_spain ~ condition, paired = F, exact = T) %>%
add_significance()
#### ---- making plots with statistics
## Mode of articulation
#- frecuency
stat.freq.mode <-  stimuli.experiment.filtered %>%
wilcox_test(corpes_norm_spain ~ condition, paired = F, exact = T) %>%
add_significance()
boxplot3 <- ggboxplot(stimuli.experiment.filtered,x="condition",y="corpes_norm_spain", palette = get_palette(c("#ffffff", "#ffffff","#ffffff"), 3),
ylab= "Frequency (corpes)",xlab="Mode of articulation")
stat.freq.mode <-  stat.freq.mode %>% add_xy_position(x = "group")
boxplot3 <- boxplot3+stat_pvalue_manual(stat.freq.mode, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.mode, detailed= T))
boxplot3
#### ---- making plots with statistics
## Mode of articulation
#- frecuency
stat.freq.mode <-  stimuli.experiment.filtered %>%
wilcox_test(corpes_norm_spain ~ condition, paired = F, exact = T) %>%
add_significance()
boxplot3 <- ggboxplot(stimuli.experiment.filtered,x="condition",y="corpes_norm_spain", palette = get_palette(c("#ffffff", "#ffffff","#ffffff"), 3),
ylab= "Frequency (corpes)",xlab="Mode of articulation")
stat.freq.mode <-  stat.freq.mode %>% add_xy_position(x = "group")
boxplot3 <- boxplot3+stat_pvalue_manual(stat.freq.mode, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.mode, detailed= F))
boxplot3
View(stat.freq.mode)
#### ---- making plots with statistics
## Mode of articulation
#- frecuency
stat.freq.mode <-  stimuli.experiment.filtered %>%
wilcox_test(corpes_norm_spain ~ condition, paired = F, exact = T) %>%
add_significance()
boxplot3 <- ggboxplot(stimuli.experiment.filtered,x="condition",y="corpes_norm_spain",
ylab= "Frequency (corpes)",xlab="Mode of articulation")
stat.freq.mode <-  stat.freq.mode %>% add_xy_position(x = "group")
boxplot3 <- boxplot3+stat_pvalue_manual(stat.freq.mode, tip.length = 0) +
labs(subtitle = get_test_label(stat.freq.mode, detailed= F))
boxplot3
boxplot3 <- ggboxplot(stimuli.experiment.filtered,x="condition",y="corpes_norm_spain",
ylab= "Frequency (corpes)",xlab="Mode of articulation")
boxplot3
boxplot3 <- ggboxplot(stimuli.experiment.filtered,x="condition",y="corpes_norm_spain",
ylab= "Frequency (corpes)",xlab="Mode of articulation")+
stat_compare_means()
boxplot3
#- letters
boxplot4 <- ggboxplot(stimuli.experiment.filtered,x="condition",y="n.char",
ylab= "length (letters)",xlab="Mode of articulation")+
stat_compare_means()
boxplot4
## letter
#- frecuency
boxplot5 <- ggboxplot(stimuli.experiment.filtered,x="sound",y="corpes_norm_spain",
ylab= "Frequency (corpes)",xlab="Mode of articulation")+
stat_compare_means()
#- letters
boxplot6 <- ggboxplot(stimuli.experiment.filtered,x="sound",y="n.char",
ylab= "length (letters)",xlab="Mode of articulation")+
stat_compare_means()
boxplot5
boxplot6
#### ---- making plots with statistics
## Mode of articulation
#- frecuency
boxplot3 <- ggboxplot(stimuli.experiment.filtered,x="condition",y="corpes_norm_spain",
ylab= "Frequency (corpes)",xlab="Mode of articulation")+
stat_compare_means()
#- letters
boxplot4 <- ggboxplot(stimuli.experiment.filtered,x="condition",y="n.char",
ylab= "length (letters)",xlab="Mode of articulation")+
stat_compare_means()
## letter
#- frecuency
boxplot5 <- ggboxplot(stimuli.experiment.filtered,x="sound",y="corpes_norm_spain",
ylab= "Frequency (corpes)",xlab="First sound")+
stat_compare_means()
#- letters
boxplot6 <- ggboxplot(stimuli.experiment.filtered,x="sound",y="n.char",
ylab= "length (letters)",xlab="First sound")+
stat_compare_means()
boxplot1
boxplot2
boxplot3
boxplot4
boxplot5
boxplot6
#deciding how to make non word stimuli. We will do:
#-Count the amount of characters in our words
#-determine the mean and the SD of the character length distribution
#-sample the amount of characters from the afforementioned distribution (bootstraping) -> boot library
#- convert amount of characters to actual n(X) strings
#########################################################
set.seed(7877)# for replicating purposes of sampling
n_targetcontrolwords <- 10 # for run
word_sample <- as.data.frame( replicate(1000,sample(stimuli.experiment.filtered$n.char,n_targetcontrolwords, replace = T)))
sample_indexes <-sample(c(1:1000))
n_sessions <- 1 # amount of desired run sessions
sample_indexes <- sample_indexes[1:n_sessions]
## note: Sample_indexes is a list of n=>1, we need to transform integers to factors for R to effectively use them to localize columns
word_sample <- word_sample[,as.factor(sample_indexes)]
## note: As we may have several columns depending on the runs,
#        we are using tidr::gather to rbind them. Then we use #        the second column, because the output from gather is:
#        column name, value
word_sample <- tidyr::gather(as.data.frame(word_sample))[2]
names(word_sample) <- c("num") #we are renaming our remaining
#### Creating stimuli
word_sample$wordControl <- c("")#empty string variable
#repeat x required n times
for (i in 1:length(word_sample[,1])){word_sample
word_sample$wordControl[i] <- strrep("x",word_sample$num[i])}
#
## load sentences
SentencesSubject <- read_excel("SentencesSubject.xlsx")
# s1
SentencesSubject$nfirst <- nchar(as.character(SentencesSubject$S1))
# s2
## we already have our control "targets"
# s3
SentencesSubject$nthird <- nchar(as.character(SentencesSubject$S3))
# s4
SentencesSubject$nfourth <- nchar(as.character(SentencesSubject$S4))
# s5
SentencesSubject$nfifth <- nchar(as.character(SentencesSubject$S5))
# s6
SentencesSubject$nsixth <- nchar(as.character(SentencesSubject$S6))
## make replaements from sample
n_targetcontrolsentences <- 10 # for run
# s1
ns1_sample <- as.data.frame( replicate(1000,sample(SentencesSubject$nfirst,n_targetcontrolsentences, replace = T)))
# s2
## we done this in previous lines (word condition)
# s3
ns3_sample <- as.data.frame( replicate(1000,sample(SentencesSubject$nthird,n_targetcontrolsentences, replace = T)))
# s4
ns4_sample <- as.data.frame( replicate(1000,sample(SentencesSubject$nfourth,n_targetcontrolsentences, replace = T)))
# s5
ns5_sample <- as.data.frame( replicate(1000,sample(SentencesSubject$nfifth,n_targetcontrolsentences, replace = T)))
# s6
ns6_sample <- as.data.frame( replicate(1000,sample(SentencesSubject$nsixth,n_targetcontrolsentences, replace = T)))
## we are using the same indexes as in the word control condition
############## create words
## note: Sample_indexes is a list of n=>1, we need to transform integers to factors for R to effectively use them to localize columns
###
# ns1
ns1_sample <- ns1_sample[,as.factor(sample_indexes)]
ns1_sample <- tidyr::gather(as.data.frame(ns1_sample))[2]
ns1_sample$wordControl <- c("")#empty string variable
#repeat x required n times
for (i in 1:length(ns1_sample[,1])){ns1_sample$wordControl[i] <- strrep("x",ns1_sample$value[i])}
###
# ns3
ns3_sample <- ns3_sample[,as.factor(sample_indexes)]
ns3_sample <- tidyr::gather(as.data.frame(ns3_sample))[2]
ns3_sample$wordControl <- c("")#empty string variable
#repeat x required n times
for (i in 1:length(ns3_sample[,1])){ns3_sample$wordControl[i] <- strrep("x",ns3_sample$value[i])}
###
# ns4
ns4_sample <- ns4_sample[,as.factor(sample_indexes)]
ns4_sample <- tidyr::gather(as.data.frame(ns4_sample))[2]
ns4_sample$wordControl <- c("")#empty string variable
#repeat x required n times
for (i in 1:length(ns4_sample[,1])){ns4_sample$wordControl[i] <- strrep("x",ns4_sample$value[i])}
###
# ns5
ns5_sample <- ns5_sample[,as.factor(sample_indexes)]
ns5_sample <- tidyr::gather(as.data.frame(ns5_sample))[2]
ns5_sample$wordControl <- c("")#empty string variable
#repeat x required n times
for (i in 1:length(ns5_sample[,1])){ns5_sample$wordControl[i] <- strrep("x",ns5_sample$value[i])}
###
# ns6
ns6_sample <- ns6_sample[,as.factor(sample_indexes)]
ns6_sample <- tidyr::gather(as.data.frame(ns6_sample))[2]
ns6_sample$wordControl <- c("")#empty string variable
#repeat x required n times
for (i in 1:length(ns6_sample[,1])){ns6_sample$wordControl[i] <- strrep("x",ns6_sample$value[i])}
## We are going to use this chunk of code to merge all the data we already have and put it into a general csv
namesdf <- names(stimuli.experiment.filtered)
namesdf <- namesdf[1:10]
stimuli.experiment.filtered <- stimuli.experiment.filtered[,as.factor(namesdf)]
as
namessentences <- names(SentencesSubject)
namessentences <- namessentences[1:8]
SentencesSubject <- SentencesSubject[,as.factor(namessentences)]
# --words
control_new <- data.frame(word_sample$wordControl)
names(control_new) <- c("stimuli")
control_new$category <- c("control")
control_new$condition <- c("control")
control_new$sound <- c(NaN)
control_new$corpes_norm_spain <- c(NaN)
control_new$outlier <- c("FALSE")
control_new$element <- c("word_control")
control_new$mean <- c(NaN)
control_new$median <- c(NaN)
control_new$n.char <- word_sample$num
#sentences
sentences <- data.frame(word_sample$wordControl,c(6),ns1_sample$wordControl,word_sample$wordControl,ns3_sample$wordControl,ns4_sample$wordControl,ns5_sample$wordControl,ns6_sample$wordControl)
#
stimuli.experiment.filtered <- rbind(stimuli.experiment.filtered,control_new)
#
names(sentences) <- names(SentencesSubject)
SentencesSubject <- rbind(SentencesSubject,sentences)
#### merging sentences with word stimuli by stimuli
#test <- merge(stimuli.experiment.filtered,SentencesSubject,by="stimuli")
#write.csv(test,"completeStimuli_Exp1.csv",fileEncoding = "UTF-8")
View(control_new)
boxplot(control_new$stimuli, xlab="control stimuli", ylab="length (letters)")
boxplot(control_new$n.char, xlab="control stimuli", ylab="length (letters)")
boxplot7 <- ggboxplot(stimuli.experiment.filtered,x="sound",y="n.char",
ylab= "length (letters)",xlab="First sound")+
stat_compare_means()
boxplot7
knitr::opts_chunk$set(echo = TRUE)
#install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, ggplot2, tidyr, stringr)
### Fe
subdirectory1200fe <- "MaxFe_TR1200"
name1200fe <- paste("./", subdirectory1200fe, sep = "")
#"~/mflores/"
OVFFiles1200fe <- list.files(name1200fe,pattern='OVF', full.names = T)
eventsFiles1200fe <- list.files(name1200fe,pattern='nEvents', full.names = T)
#originFiles <- paste(originFiles, subdirectory, sep = "")
#xfiles <- str_remove_all(originFiles,"nEvents.csv")
#xfiles <- unique(xfiles)
subdirectory1500fe <- "MaxFe_TR1500"
name1500fe <- paste("./", subdirectory1500fe, sep = "")
#"~/mflores/"
OVFFiles1500fe <- list.files(name1500fe,pattern='OVF', full.names = T)
eventsFiles1500fe <- list.files(name1500fe,pattern='nEvents', full.names = T)
### Fd
subdirectory1200fd <- "MaxFd_TR1200"
name1200fd <- paste("./", subdirectory1200fd, sep = "")
#"~/mflores/"
OVFFiles1200fd <- list.files(name1200fd,pattern='OVF', full.names = T)
eventsFiles1200fd <- list.files(name1200fd,pattern='nEvents', full.names = T)
#originFiles <- paste(originFiles, subdirectory, sep = "")
#xfiles <- str_remove_all(originFiles,"nEvents.csv")
#xfiles <- unique(xfiles)
subdirectory1500fd <- "MaxFd_TR1500"
name1500fd <- paste("./", subdirectory1500fd, sep = "")
#"~/mflores/"
OVFFiles1500fd <- list.files(name1500fd,pattern='OVF', full.names = T)
eventsFiles1500fd <- list.files(name1500fd,pattern='nEvents', full.names = T)
#opening OVF files and binding them together
### Fe
for (i in 1:10){
OVF_lists <- read.csv2(OVFFiles1200fe[i] , header = F, sep = ",")
if (i==1){
OVF_df1200fe <- OVF_lists
}
else
{OVF_df1200fe <- rbind(OVF_df1200fe, OVF_lists) }
}
for (i in 1:10){
OVF_lists <- read.csv2(OVFFiles1500fe[i] , header = F, sep = ",")
if (i==1){
OVF_df1500fe <- OVF_lists
}
else
{OVF_df1500fe <- rbind(OVF_df1500fe, OVF_lists) }
}
### Fd
for (i in 1:10){
OVF_lists <- read.csv2(OVFFiles1200fd[i] , header = F, sep = ",")
if (i==1){
OVF_df1200fd <- OVF_lists
}
else
{OVF_df1200fd <- rbind(OVF_df1200fd, OVF_lists) }
}
for (i in 1:10){
OVF_lists <- read.csv2(OVFFiles1500fd[i] , header = F, sep = ",")
if (i==1){
OVF_df1500fd <- OVF_lists
}
else
{OVF_df1500fd <- rbind(OVF_df1500fd, OVF_lists) }
}
#opening event files and binding them together
### Fe
for (i in 1:length(eventsFiles1200fe)){
events_lists <- read.csv2(eventsFiles1200fe[i] , header = F, sep = ",")
if (i==1){
events_df1200fe <- events_lists
}
else
{events_df1200fe <- rbind(events_df1200fe, events_lists) }
}
for (i in 1:length(eventsFiles1500fe)){
events_lists <- read.csv2(eventsFiles1500fe[i] , header = F, sep = ",")
if (i==1){
events_df1500fe <- events_lists
}
else
{events_df1500fe <- rbind(events_df1500fe, events_lists) }
}
### Fd
for (i in 1:length(eventsFiles1200fd)){
events_lists <- read.csv2(eventsFiles1200fd[i] , header = F, sep = ",")
if (i==1){
events_df1200fd <- events_lists
}
else
{events_df1200fd <- rbind(events_df1200fd, events_lists) }
}
for (i in 1:length(eventsFiles1500fd)){
events_lists <- read.csv2(eventsFiles1500fd[i] , header = F, sep = ",")
if (i==1){
events_df1500fd <- events_lists
}
else
{events_df1500fd <- rbind(events_df1500fd, events_lists) }
}
events_df <- data.frame(events_df1200fe$V1,"1200fe")
names(events_df) <- c("events","TR")
tmp.df <- data.frame(events_df1500fe$V1,"1500fe")
names(tmp.df) <- c("events","TR")
events_df <- rbind(events_df,tmp.df)
tmp.df <- data.frame(events_df1200fd$V1,"1200fd")
names(tmp.df) <- c("events","TR")
events_df <- rbind(events_df,tmp.df)
tmp.df <- data.frame(events_df1500fd$V1,"1500fd")
names(tmp.df) <- c("events","TR")
events_df <- rbind(events_df,tmp.df)
#build violin plots
dp <- ggplot(events_df, aes(x=TR, y=events )) +
geom_violin(trim=FALSE)+
geom_jitter(height = 0, width = 0.1)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Unmatching trials frecuency in Genetic algorithm", y = "Control trials excess")
dp + theme_classic()
OVF_dffe <- data.frame(OVF_df1200fe$V1,"1200fe")
names(OVF_dffe) <- c("OVF","TR")
tmp.df <- data.frame(OVF_df1500fe$V1,"1500fe")
names(tmp.df) <- c("OVF","TR")
OVF_dffe <- rbind(OVF_dffe,tmp.df)
OVF_dffe$OVF <- as.numeric(OVF_dffe$OVF)
#build violin plots
dp <- ggplot(OVF_dffe, aes(x=TR, y=OVF)) +
geom_violin(trim=FALSE)+
geom_jitter(height = 0, width = 0.1)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Efficiency achieved in Genetic algorithm", y = "OVF")
dp + theme_classic()
#individual dots
